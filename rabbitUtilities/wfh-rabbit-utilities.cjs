!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["wfh-rabbit-utilities"]=t():e["wfh-rabbit-utilities"]=t()}(self,()=>(()=>{"use strict";var e={n:t=>{var s=t&&t.__esModule?()=>t.default:()=>t;return e.d(s,{a:s}),s},d:(t,s)=>{for(var i in s)e.o(s,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:s[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{default:()=>g});const s=require("amqplib");var i=e.n(s);const a=class{#e;#t;constructor(e,t){this.#e=e,this.#t=t}log(e,t=!1){t?Array.isArray(arguments)&&arguments.length>0?console.error(`!!!! ${this.#e} FOR SERVICE: ${this.#t}: ${e}`,...arguments):console.error(`!!!! ${this.#e} FOR SERVICE: ${this.#t}: ${e}`):console.log(`!!!! ${this.#e} FOR SERVICE: ${this.#t}: ${e}`)}},n=class extends a{constructor(e,t,s,i){super("RABBITMQ SUBSCRIPTION SERVICE - MESSAGE: ",i),this.rabbitUrl=e,this.serviceName=i,this.exchangeName=t,this.queueName=s,this.connection=null}async endConnection(e){setTimeout(function(){e.close(),process.exit(0)},500)}async connect(e){try{this.log(`subscription attempting to start; exchange=${this.exchangeName}, queue=${this.queueName}`),this.connection=await i().connect(this.rabbitUrl),this.log("Creating channel"),this.connection.createChannel().then(t=>{this.log("Assert Queue"),t.assertQueue(this.queueName,{durable:!0},e=>{this.log("Queue Assertion "),e&&this.log("ERROR ON QUEUE",!0,e)}),this.log("SETTING UP CONSUMER:",this.queueName),t.consume(this.queueName,e,{noAck:!0}),this.log(`subscription complete - exchange=${this.exchangeName}, queue=${this.queueName}`)})}catch(e){this.log("ERROR connecting to RabbitMQ:",!0,e)}}},o={DEBUG:"35d0c091-14ca-4d5b-8a58-95c6e7e41cd3",INFO:"1754199b-4c7e-431c-91cb-ed1e21a96a45",WARNING:"7cfbd5dd-a746-40b9-b390-4bd9b31cd6df",ERROR:"1fda1a86-3c4c-443d-bd67-ba52244a6040"},c={ConsoleMessage:"c0b744d9-21ef-4dd9-aca1-47e4a5d663be",JsonMessage:"3a5d747e-274d-49ba-88c0-03a6f5268737"},r=require("uuid"),h=class{constructor(e,t,s,i,a,n,h,l){this.id=e,this.messageId=t??(0,r.v4)(),this.createdTimeStamp=s??Date.UTC(),Object.values(o).includes(i)?this.logLevel=i:this.invalidLogLevel(i),Object.values(c).includes(a)?this.category=a:this.invalidLogLevel(i),this.message=n,this.publishingService=h,this.consumingService=l}invalidLogLevel(e){throw Error(`###${Date.UTC()}### Invalid Log Level Passed to LogMessage.  LogLevel: ${e}; MessageId: ${this.messageId}, Publishing Service: ${this.publishingService};`)}toJson(){let e={id:this.id,messageId:this.messageId,createdTimeStamp:this.createdTimeStamp,logLevel:this.logLevel,category:this.category,message:this.message,publishingService:this.publishingService,consumingService:this.consumingService};return JSON.stringify(e)}toLogTableInsert(){let e={id:this.id,message_id:this.messageId,created_time_stamp:this.createdTimeStamp,level:this.logLevel,category:this.category,message:this.message,publishing_service_name:this.publishingService,consuming_service_name:this.consumingService};return JSON.stringify(e)}},l=class extends a{constructor(e,t,s,i){super("RABBITMQ PUBLICATION SERVICE - MESSAGE: ",i),this.rabbitUrl=e,this.serviceName=i,this.exchangeName=t,this.queueName=s,this.connection=null}async publish(e,t="undefined",s=o.DEBUG,i=c.JsonMessage){this.connection||await this.connect();try{this.log("CREATING LOG MESSAGE");let a=new h(null,null,null,s,i,e,this.serviceName,t).toJson();this.log("PUBLISHING MESSAGE: ",a),await this.connect.sendToQueue(this.queueName,Buffer.from(a)),this.log(`SETUP PUBLICATION complete - exchange=${this.exchangeName}, queue=${this.queueName}`)}catch(e){this.log("ERROR publishing to RabbitMQ:",!0,e)}}async connect(){try{this.log(`publication attempting to start; exchange=${this.exchangeName}, queue=${this.queueName}`),this.connection=await i().connect(this.rabbitUrl),this.log("Creating channel"),await this.connection.createChannel().then(e=>{this.log("Asserting Queue"),e.assertQueue(this.queueName,{durable:!0},e=>{this.log("Queue Assertion "),e&&this.log("ERROR ON QUEUE",!0,e)})})}catch(e){this.log("ERROR connecting to RabbitMQ:",!0,e)}}},u={workhorseApi:"WFH-INATOR-WORKHORSE-API",loggingService:"WFH-INATOR-LOGGING-SERVICE"},g=()=>({Subscription:n,Publication:l,LogLevel:o,LogCategory:c,ServiceName:u,LogMessage:h});return t})());